{% extends "layout.twig" %}

{% block title %}Le monde{% endblock title %}
       
{% block style %}

		<meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>

	    <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet/leaflet.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet/L.Control.MousePosition.css" />
        <link rel="stylesheet" href="{{ app.request.basepath }}/leaflet/leaflet.draw.css" />
        
		<style>		
			html, body, #content {
			    height: 100%;
			    width: 100%;
  				overflow: hidden;
			}
			body {
				padding-top: 50px;
			}
			
			#map {
				width: auto;
  				height: 100%;
			}
			.navbar {
				margin-bottom:0px;
				margin-top: -50px;
			}
			#content {
				padding: 0 0 0 0;
			}
			
			.info, .geom {
				padding: 6px 8px;
				font: 14px/16px Arial, Helvetica, sans-serif;
				background: white;
				background: rgba(255,255,255,0.8);
				box-shadow: 0 0 15px rgba(0,0,0,0.2);
				border-radius: 5px;
				width: 300px;
			}
			.info h4 {
				margin: 0 0 5px;
				color: #777;
			}
			
			.geom {
				display: none;
			}

		</style>
{% endblock %}

{% block content %}
		<div id="map"></div>
{% endblock %}

{% block javascript %}



<script src="{{ app.request.basepath }}/leaflet/leaflet.js"></script>
<script src="{{ app.request.basepath }}/leaflet/L.Control.MousePosition.js"></script>
<script src="{{ app.request.basepath }}/leaflet/leaflet.draw.js"></script>

<script>
	var yx = L.latLng;
	
	var xy = function(x, y) {
		if (L.Util.isArray(x)) {    // When doing xy([x, y]);
			return yx(x[1], x[0]);
		}
		return yx(y, x);  // When doing xy(x, y);
	};

	// creation de la carte
	var mapMinZoom = 0;
	var mapMaxZoom = 6;
	var img = [ 6103, 4297 ];
	
	var map = L.map('map', {
	  maxZoom: mapMaxZoom,
	  minZoom: mapMinZoom,
	  crs: L.CRS.Simple
	}).setView([0,0], mapMaxZoom);
	
	var mapBounds = new L.LatLngBounds(
		map.unproject([0,11536], mapMaxZoom),
		map.unproject([16384,0], mapMaxZoom)	    
	);

	map.fitBounds(mapBounds);

	// creation du panneau d'information
	var info = L.control();
	info.onAdd = function(map) {
		this._div = L.DomUtil.create('div', 'info');
		this.update();
		return this._div;
	};

	info.update = function (props) {
		if ( props && ! props.description ) props.description = 'Aucune description';
		this._div.innerHTML = (props ? '<h4>' + props.name + '</h4>'
				+ '<p>' + props.description + '</p>': '<p>Passez la sourie par dessus un territoire</p>');
	};

	info.addTo(map);

	// creation du panneau de creation de territoire
	var geom = L.control();
	geom.onAdd = function(map) {
		this._div = L.DomUtil.create('div', 'geom');
		this.update();
		return this._div;
	};

	var currentGeom = '';
	geom.update = function (geom) {
		if ( ! geom ) 
		{
			this._div.innerHTML = '';
			$(this._div).hide();
			currentGeom = '';
		}	
		else 
		{
			currentGeom = geom;
			var select = '<label>Choisissez le territoire : </label>';
			select = select + '<select id="selectedCountry">';
			for(var key in countries)
			{
				select = select + '<option value="'+countries[key].id+'">'+countries[key].name+'</option>'
			}
			select = select +  '</select>';
			select = select + '<input type="submit" value="Sauver" onclick="updateGeom()"/>'
			
			this._div.innerHTML = select;			
			
			$(this._div).show();
		}
	};

	updateGeom = function() {
		var country = document.getElementById("selectedCountry");
		var territoireId = country.options[country.selectedIndex].value;
		
		$.ajax({
			type: "POST",
			dataType: 'json',
			url: "world/countries/"+territoireId+"/update",
			data: {geom: currentGeom},
			success: function(data) {
			    alert("la geographie a été enregistrée");
			    var geom = JSON.parse(country.geom);
		    	geom.properties.name = country.name;  	
		    	geom.properties.description = country.description;
			    countries_boundary.addData(geom);
			}
			}).error(function() {
				alert("désolé, une erreur est survenue");
			});
		
		geom.update();
	}

	geom.addTo(map);
		

	// branchement de la carte sur le tile provider
	L.tileLayer('img/map/{z}/{x}/{y}.png', {
        minZoom: mapMinZoom, 
        maxZoom: mapMaxZoom,
        bounds: mapBounds,
        attribution: 'Rendered with <a href="http://www.gdal.org/gdal2tiles.html">Gdal2Tile</a>',
        noWrap: false,
        tms: false,
        id: 'hyboree',
        continuousWorld: true
      }).addTo(map);

	// ajout des controles au clavier
	map.keyboard.enable();

	// ajout des coordonnées de la sourie
	L.control.mousePosition().addTo(map);	

	// evenement mouseover sur une geometrie
	function mouseoverfunction(e) 
	{
		var layer = e.target;
		info.update(layer.feature.properties);
	}

	// evenement mouseout sur une geometrie
	function mouseoutfunction(e)
	{
		info.update();
	}

	// attache les evenements mouseover et mouseout sur les geometries
	function onEachFeature(feature, layer) {
	    if (feature.properties ) {
	        layer.bindPopup(feature.properties.name);
	        layer.on({
		        mouseover: mouseoverfunction,
			    mouseout: mouseoutfunction
		    });
	    }
	}

	// récupére les geometrie des pays
	var countries_boundary = new L.geoJson(false, {onEachFeature: onEachFeature});
	countries_boundary.addTo(map);

	// liste des pays
	var countries = new Object();

	$.ajax({
		dataType: "json",
		url: "world/countries.json",
		success: function(data) {
		    $(data).each(function(key, country) {
			    if ( country.geom != null )
			    {
			    	var geom = JSON.parse(country.geom);
			    	geom.properties.name = country.name;  	
			    	geom.properties.description = country.description;
			    	countries_boundary.addData(geom);
			    }

			    countries[country.id] = country;
		    });
		}
		}).error(function() {});


	
	// Initialise un FeatureGroup pour stocker les geometries dessinée
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);

	// Initialise the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
	    edit: {
	        featureGroup: drawnItems
	    }
	});
	map.addControl(drawControl);
	
	map.on('draw:created', function (e) {
	    var type = e.layerType,
	        layer = e.layer;
	
	    if (type === 'marker') {
	        // Do marker specific actions
	    }
	
	    // Do whatever else you need to. (save to db, add to map etc)
	    geom.update(JSON.stringify(layer.toGeoJSON()));
	    layer.addTo(drawnItems);
	    map.addLayer(layer);
	});
	
	map.on('draw:edited', function (e) {
	    var layers = e.layers;
	    layers.eachLayer(function (layer) {
	        //do whatever you want, most likely save back to db
	    	geom.update(JSON.stringify(layer.toGeoJSON()));
	    });
	});


</script>

{% endblock %}