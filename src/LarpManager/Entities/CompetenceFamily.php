<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-08-25 15:17:56.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace LarpManager\Entities;

use LarpManager\Entities\BaseCompetenceFamily;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * LarpManager\Entities\CompetenceFamily
 *
 * @Entity(repositoryClass="LarpManager\Repository\CompetenceFamilyRepository")
 */
class CompetenceFamily extends BaseCompetenceFamily
{

	/**
	 * @ManyToMany(targetEntity="Classe", mappedBy="competenceFamilyFavorites")
	 */
	protected $classeFavorites;
	
	/**
	 * @ManyToMany(targetEntity="Classe", mappedBy="competenceFamilyNormales")
	 */
	protected $classeNormales;
	
	/**
	 * @ManyToMany(targetEntity="Classe", mappedBy="competenceFamilyCreations")
	 */
	protected $classeCreations;
	
	public function __construct()
	{
		$this->classeFavorites = new ArrayCollection();
		$this->classeNormales = new ArrayCollection();
		$this->classeCreations = new ArrayCollection();
		
		parent::__construct();
	}
	
	public function __toString()
	{
		return $this->getLabel();
	}
	
	/**
	 * Fourni la compétence de premier niveau d'une famille de compétence
	 * @return Competence $competenceFirst
	 */
	public function getFirstCompetence()
	{
		$minimumIndex = null ;
		$competenceFirst = null;
		
		foreach ( $this->getCompetences() as $competence )
		{
			if ( $minimumIndex == null )
			{
				$competenceFirst = $competence;
				$minimumIndex = $competence->getLevel()->getIndex();
			}
			else if ( $competence->getLevel()->getIndex() < $minimumIndex )
			{
				$competenceFirst = $competence;
				$minimumIndex = $competence->getLevel()->getIndex();
			}
		}
		
		return $competenceFirst;
	}
	
	/**
	 * Fourni la compétence de plus haut niveau d'une famille de compétence
	 */
	public function getLastCompetence()
	{
		$maximumIndex = null ;
		$competenceLast = null;
		
		foreach ( $this->getCompetences() as $competence )
		{
			if ( $maximumIndex == null )
			{
				$competenceLast = $competence;
				$maximumIndex = $competence->getLevel()->getIndex();
			}
			else if ( $competence->getLevel()->getIndex() > $maximumIndex )
			{
				$competenceLast = $competence;
				$maximumIndex = $competence->getLevel()->getIndex();
			}
		}
		
		return $competenceLast;
	}
	
	
	/**
	 * Add Classe entity to collection.
	 *
	 * @param \LarpManager\Entities\Classe $classe
	 * @return \LarpManager\Entities\CompetenceFamily
	 */
	public function addClasseFavorite(Classe $classe)
	{
		$this->classeFavorites[] = $classe;
	
		return $this;
	}
	
	/**
	 * Remove Classe entity from collection.
	 *
	 * @param \LarpManager\Entities\Classe $classe
	 * @return \LarpManager\Entities\CompetenceFamily
	 */
	public function removeClasseFavorite(Classe $classe)
	{
		$this->classeFavorites->removeElement($classe);
	
		return $this;
	}
	
	/**
	 * Get Objet entity collection.
	 *
	 * @return \Doctrine\Common\Collections\Collection
	 */
	public function getClasseFavorites()
	{
		return $this->classeFavorites;
	}
	
	/**
	 * Add Classe entity to collection.
	 *
	 * @param \LarpManager\Entities\Classe $classe
	 * @return \LarpManager\Entities\CompetenceFamily
	 */
	public function addClasseNormale(Classe $classe)
	{
		$this->classeNormales[] = $classe;
	
		return $this;
	}
	
	/**
	 * Remove Classe entity from collection.
	 *
	 * @param \LarpManager\Entities\Classe $classe
	 * @return \LarpManager\Entities\CompetenceFamily
	 */
	public function removeClasseNormale(Classe $classe)
	{
		$this->classeNormales->removeElement($classe);
	
		return $this;
	}
	
	/**
	 * Get Objet entity collection.
	 *
	 * @return \Doctrine\Common\Collections\Collection
	 */
	public function getClasseNormales()
	{
		return $this->classeNormales;
	}
	
	/**
	 * Add Classe entity to collection.
	 *
	 * @param \LarpManager\Entities\Classe $classe
	 * @return \LarpManager\Entities\CompetenceFamily
	 */
	public function addClasseCreation(Classe $classe)
	{
		$this->classeCreations[] = $classe;
	
		return $this;
	}
	
	/**
	 * Remove Classe entity from collection.
	 *
	 * @param \LarpManager\Entities\Classe $classe
	 * @return \LarpManager\Entities\CompetenceFamily
	 */
	public function removeClasseCreation(Classe $classe)
	{
		$this->classeCreations->removeElement($classe);
	
		return $this;
	}
	
	/**
	 * Get Objet entity collection.
	 *
	 * @return \Doctrine\Common\Collections\Collection
	 */
	public function getClasseCreations()
	{
		return $this->classeCreations;
	}
	
	/**
	 * Fourni la description débarassé de sa mise en forme
	 */
	public function getDescriptionRaw()
	{
		return strip_tags($this->getDescription());
	}
}