<?php

/**
 * LarpManager - A Live Action Role Playing Manager
 * Copyright (C) 2016 Kevin Polez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2016-08-20 09:30:46.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace LarpManager\Entities;

use Doctrine\Common\Collections\ArrayCollection;
use LarpManager\Entities\BaseRestauration;

/**
 * LarpManager\Entities\Restauration
 *
 * @Entity(repositoryClass="LarpManager\Repository\RestaurationRepository")
 */
class Restauration extends BaseRestauration
{
	/**
	 * Fourni la liste des utilisateurs classÃ© par GN
	 */
	public function getUserByGn()
	{
		$result = new ArrayCollection();
		foreach ( $this->getUserHasRestaurations() as $userHasRestauration)
		{
			if ( $result->containsKey($userHasRestauration->getGn()->getId()) )
			{
				$gn = $result->get($userHasRestauration->getGn()->getId());
				$gn['count']++;
				$gn['users'][] = $userHasRestauration->getUser();
				$result[$userHasRestauration->getGn()->getId()] = $gn;
			}
			else
			{
				$result[$userHasRestauration->getGn()->getId()] = array(
						'gn' => $userHasRestauration->getGn(),
						'count' => 1,
						'users' => array($userHasRestauration->getUser()),
				);
			}
		}
		return $result;
	}
	
	/**
	 * Fourni la liste des restrictions classÃ© par GN
	 */
	public function getRestrictionByGn()
	{
		$result = new ArrayCollection();
		foreach ( $this->getUserHasRestaurations() as $userHasRestauration)
		{
			if ( $userHasRestauration->getUser()->getRestrictions()->count() > 0);
			{
				if ( $result->containsKey($userHasRestauration->getGn()->getId()) )
				{
					$gn = $result->get($userHasRestauration->getGn()->getId());
					
					foreach ( $userHasRestauration->getUser()->getRestrictions() as $restriction)
					{
						if ( ! $gn['restrictions']->containsKey($restriction->getId()))
						{
							$gn['restrictions'][$restriction->getId()] = array(
									'restriction' => $restriction,
									'count' => 1,
								);
						}
						else
						{
							$restriction = $gn['restrictions']->get($restriction->getId());
							$restriction['count']++;
							$gn['restrictions'][$restriction->getId()] = $restriction;
						}
					}
					
					$result[$userHasRestauration->getGn()->getId()] = $gn;
				}
				else
				{
					$result[$userHasRestauration->getGn()->getId()] = array(
						'gn' => $userHasRestauration->getGn(),
						'restrictions' => new ArrayCollection(),
					);
					
					foreach ( $userHasRestauration->getUser()->getRestrictions() as $restriction)
					{
						$result[$userHasRestauration->getGn()->getId()]['restrictions'][$restriction->getId()] = array(
								'restriction' => $restriction,
								'count' => 1,
							);
					}
				}
			}
		}
		return $result;
	}
}